version: '3.1'

services:

  redis:
    image: redis
    ports:
      - '6379'
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5

  postgres_db:
    image: postgres:16.0
    env_file:
      - .env.docker
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - '5432'
    volumes:
      - pg_data:/var/lib/postgresql/data/pgdata
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build: .
    tty: true
    ports:
      - '8001:8000'
    depends_on:
      postgres_db:
        condition: service_healthy
    command: >
      sh -c "python manage.py migrate && 
      python manage.py create_superuser &&
      python manage.py collectstatic --no-input"
    env_file:
      - .env.docker
    volumes:
      - ./local_static:/app/static

  telegram-bot:
    build: .
    tty: true
    command: sh -c "python ./telegram-bot/telegram_bot.py"
    depends_on:
      postgres_db:
        condition: service_healthy
      app:
        condition: service_started
    env_file:
      - .env.docker

  celery:
    build: .
    tty: true
    command: celery -A config worker -l INFO
    depends_on:
      redis:
        condition: service_started
      app:
        condition: service_started
    env_file:
      - .env.docker

  celery-beat:
    build: .
    tty: true
    command: celery -A config beat -l INFO -S django
    depends_on:
      redis:
        condition: service_started
      app:
        condition: service_started
    env_file:
      - .env.docker

  web:
    build: .
    command: gunicorn --workers 3 --bind 0.0.0.0:8000 config.wsgi
    ports:
      - "8001:8000"
    env_file:
      - .env.docker

volumes:
  pg_data:
  local_static: